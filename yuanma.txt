#include<graphics.h>
#include<conio.h>
#include<time.h>
#include<stdio.h>


#define KEY_DOWN(VK_C) (GetAsyncKeyState(VK_C)&0X8000)


typedef struct postion
{
	int x;
	int y;
}postype;

void init();//初始化界面
void gamebegin();
void gameplay();
void close();
void drawcursor(postype,COLORREF);
void drawtime(int);
void drawscore(int);
void getsamecolorballs(postype,COLORREF);
int isvaild(postype,COLORREF);
void ballsfall();
void turn();
//void delay(unsigned int);


COLORREF colorAll[6]={RGB(200,0,0),RGB(0,200,0),RGB(0,0,200),
                     RGB(200,200,0),RGB(200,0,200),RGB(0,200,200)};

postype cur;             //当前光标位置
postype ballsArr[180];   //同色小球坐标
int index=0;               //同色小球个数

void main()
{
	init();
	gamebegin();
	gameplay();
	close();
}

void init()
{
	initgraph(800,600);
}

void gamebegin()
{
	//绘制边框
	setlinecolor(RGB(50,50,50));
	setlinestyle(PS_SOLID,10);
	rectangle(245,55,655,545);

	//绘制小球
	setlinestyle(PS_SOLID);
	srand((unsigned) time(NULL));   
	for(int x=270;x<=630;x+=40)
	{
		for(int y=80;y<=530;y+=40)
		{ 
			COLORREF c1=colorAll[rand()%6];
			setlinecolor(c1);
			setfillcolor(c1);
			fillcircle(x,y,18);
		}
	}

	//绘制光标
	cur.x=430;
	cur.y=320;
	drawcursor(cur,RGB(255,255,255));
	//setlinecolor(RGB(255,255,255));
	//rectangle(410,300,450,340);

	//绘制时间
	drawtime(30);
	/*
	settextcolor(RGB(255,255,0));
	settextstyle(25,0,_T("黑体"));
	char s[]="剩余时间:30 s";
	outtextxy(20,50,s);   //s是指数组s
	*/
	//绘制分数
	drawscore(0);
}

//玩游戏
void gameplay()
{
	while(1)
	{
		if(KEY_DOWN(VK_UP)&&cur.y>80)
		{
			drawcursor(cur,RGB(0,0,0));
			cur.y-=40;
			drawcursor(cur,RGB(255,255,255));
		}
		else if(KEY_DOWN(VK_DOWN)&&cur.y<520)
		{
			drawcursor(cur,RGB(0,0,0));
			cur.y+=40;
			drawcursor(cur,RGB(255,255,255));
		}
		else if(KEY_DOWN(VK_LEFT)&&cur.x>270)
		{
			drawcursor(cur,RGB(0,0,0));
			cur.x-=40;
			drawcursor(cur,RGB(255,255,255));
		}
		else if(KEY_DOWN(VK_RIGHT)&&cur.x<630)
		{
			drawcursor(cur,RGB(0,0,0));
			cur.x+=40;
			drawcursor(cur,RGB(255,255,255));
		}

       //绘制小球消失过程
 		else if(KEY_DOWN(VK_RETURN)||KEY_DOWN(VK_SPACE))
		{
			//获得光标所在位置周围的同色小球,并记录同色小球个数
			getsamecolorballs(cur,getpixel(cur.x,cur.y));           //getpixel获得x,y坐标点的颜色，并返回这个COLORREF型值

			//将同色小球消失一段时间（将数组中的元素依次置黑）
			if(index>=2)
			{
			    for(int i=0;i<=index;i++)
				{
			  	    setlinecolor(RGB(0,0,0));
				    setfillcolor(RGB(0,0,0));
				    fillcircle(ballsArr[i].x,ballsArr[i].y,18);
				}
			//上方的小球下落
				Sleep(500);
				 ballsfall();
			}
			index=0;
		}
 		Sleep(100);
	    //delay(1000);
	}
}

/*void delay(unsigned int i)
{
	unsigned int x,y;
	for(x=i;x>0;x--)
	{
		for(y=10000;y>0;y--);
	}
}*/

//游戏失败
void close()
{
	getch();
	closegraph();
}


void drawcursor(postype pos,COLORREF c1)
{
	setlinecolor(c1);
	rectangle(pos.x-20,pos.y-20,pos.x+20,pos.y+20);
}

void drawtime(int sec)
{
	char str[30];
	settextcolor(RGB(255,255,0));
	settextstyle(25,0,_T("黑体"));
	sprintf(str,"剩余时间:%d",sec);
	//char s[]="剩余时间:30 s";
	outtextxy(20,50,str);
}

void drawscore(int score)
{
	char str[30];
	settextcolor(RGB(255,0,0));
	settextstyle(25,0,_T("黑体"));
	sprintf(str,"分 数: %d",score);
	outtextxy(20,515,str);
}

void getsamecolorballs(postype cur,COLORREF c1)
{
	ballsArr[index].x=cur.x;
	ballsArr[index].y=cur.y;
	index++;

	/*    思路分析
	postype upball;
	upball.x=cur.x;
	upball.y=cur.y-40;
	if(getpixel(upball.x,upball.y)==c1)
	{
		ballsArr[index].x=upball.x;
		ballsArr[index].y=upball.y;
		index++
	}

	postype downball;
    downball.x=cur.x;
	downball.y=cur.y+0;
	if(getpixel(downball.x,downball.y)==c1)
	{
		ballsArr[index].x=downball.x;
		ballsAee[index].y=downball.y;
		index++;
	}
	*/
	postype tmball;
	for(int i=1;i<=4;i++)
	{
		switch(i)
		{
		    case 1:tmball.x=cur.x; tmball.y=cur.y-40; break;
			case 2:tmball.x=cur.x; tmball.y=cur.y+40; break;
			case 3:tmball.x=cur.x-40; tmball.y=cur.y; break;
		    case 4:tmball.x=cur.x+40; tmball.y=cur.y; break;
		}
		/*if(getpixel(tmball.x,tmball.y)==c1)
		{
			/*ballsArr[index].x=tmball.x;
			ballsArr[index].y=tmball.y;
			index++;
			getsamecolorballs(tmball,c1);
		}*/
		if(isvaild(tmball,c1))
		{
			getsamecolorballs(tmball,c1);
		}
	}
}

int isvaild(postype cur,COLORREF c1)
{
	if(getpixel(cur.x,cur.y)!=c1)
	{
		return 0;
	}
	else
	{
		for(int i=1;i<=index;i++)
		{
			if(cur.x==ballsArr[i].x&&cur.y==ballsArr[i].y)
			{
				return 0;
			}
		}
		return 1;
	}
}

void turn()
{
	int i,j;
	postype temp;
	for(j=0;j<index-1;j++)
	for(i=0;i<index-1-j;i++)
	{
		if(ballsArr[i].x>ballsArr[i+1].x)
		{
			temp=ballsArr[i];
			ballsArr[i]=ballsArr[i+1];
			ballsArr[i+1]=temp;
		}
		if(ballsArr[i].y>ballsArr[i+1].y)
		{
			temp=ballsArr[i];
			ballsArr[i]=ballsArr[i+1];
			ballsArr[i+1]=temp;
		}
	}
}

void ballsfall()
{
	turn();
	for(int i=0;i<index;i++)
	{
		for(int k=ballsArr[i].y;k>80;k-=40)
		{
			COLORREF c1=getpixel(ballsArr[i].x,k-40);
			setlinecolor(c1);
			setfillcolor(c1);
			fillcircle(ballsArr[i].x,k,18);
		}
		COLORREF c1=colorAll[rand()%6];
		setlinecolor(c1);
		setfillcolor(c1);
		fillcircle(ballsArr[i].x,80,18);
	}
}

